# This is a basic workflow to help you get started with Actions

name: Deploy to AWS

env: 
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: s3-individueel
  ECS_TASK_DEFINITION: ./aws/task-definition.json
  ECS_CLUSTER_NAME: s3-individueel
  ECS_SERVICE_NAME: s3-individueel-service
  CONTAINER_NAME: product-api

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "production" branch
  push:
    branches: [ "production" ]
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
permissions:
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Build:
    # The type of runner that the job will run on
    name: üîß Build Image
    runs-on: ubuntu-latest
    outputs: 
      tag: ${{ steps.build-img.outputs.tag }}
      image: ${{ steps.build-img.outputs.image }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: üîß Checkout repository
        uses: actions/checkout@v3
        
      - name: üîß Build Docker Image
        id: build-img
        env: 
          ECR_REGISTRY: ${{ secrets.AWS_REGISTRY_URL }}
          IMAGE_TAG:  ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "::set-output name=tag::$IMAGE_TAG"
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  
  Push:
    name: ‚òÅ Push Image to AWS ECR
    runs-on: ubuntu-latest
    needs: "Build"
    
    steps:
      - name: ‚òÅ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: ‚òÅ Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: ‚òÅ Push Docker Image to AWS ECR
        env: 
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ needs.Build.outputs.tag }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    
  Deploy:
    name: ‚òÅ Deploy Image to Production
    runs-on: ubuntu-latest
    needs: ['Build', 'Push']
    
    steps:
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.Build.outputs.image }}
    
      - name: ‚òÅ Deploy AWS ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with: 
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
      
