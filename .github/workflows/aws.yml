name: Deploy to AWS

on:
  push:
    branches: [ "production" ]

env:
  AWS_REGION: eu-central-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: s3-individueel        # set this to your Amazon ECR repository name
  ECS_SERVICE: s3-individueel-service                # set this to your Amazon ECS service name
  ECS_CLUSTER: s3-individueel                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./aws/task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: product-api-container          # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  build:
    # The type of runner that the job will run on
    name: üîß Build Image
    runs-on: ubuntu-latest
    outputs:
      imageUrl: ${{ steps.build-img.outputs.image }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: üîß Checkout repository
        uses: actions/checkout@v3
        
      - name: ‚òÅ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: ‚òÅ Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: üîß ‚òÅ Build & Push Docker Image to AWS ECR
        id: build-img
        env: 
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$(echo ${{ steps.login-ecr.outputs.registry }})"
  deploy:
    name: ‚òÅ Deploy Image to Production
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: üîß Checkout repository
        uses: actions/checkout@v3   
        
      - name: ‚òÅ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
         
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          imageData: ${{ needs.build.outputs.imageUrl }}
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build.outputs.imageUrl }}
    
      - name: ‚òÅ Deploy AWS ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with: 
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
