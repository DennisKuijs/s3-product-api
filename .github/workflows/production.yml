name: Deploy to Production

on:
  push:
    branches: [ "production" ]

env:
  AWS_REGION: eu-central-1                   
  ECR_REPOSITORY: s3-individueel        
  ECS_SERVICE: s3-individueel-service                
  ECS_CLUSTER: s3-individueel                 
  ECS_TASK_DEFINITION: ./aws/task-definition.json 
  CONTAINER_NAME: product-api-container
  IMAGE_TAG: ${{ github.sha }}

permissions:
  contents: read

jobs:
  login:
    name: üîí Connect to AWS
    runs-on: ubuntu-latest
    outputs:
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - name: ‚òÅ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'
          
      - name: ‚òÅ Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
  build:
    name: üîß Build Docker Image
    runs-on: ubuntu-latest
    needs: login
    outputs:
      image: ${{ steps.build-img.outputs.image }}
    steps:
      - name: üîß Checkout repository
        uses: actions/checkout@v3
        
      - name: üîß Build Image
        id: build-img
        env:
          ECR_REGISTRY: ${{ needs.login.outputs.ecr_registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY" >> $GITHUB_OUTPUT
  push:
    name: ‚òÅ Push Image to ECR
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: ‚òÅ Push Docker Image to ECR
        env:
          IMAGE: ${{ needs.build.outputs.image }}
        run: |
          docker push $IMAGE_TAG
    
      
